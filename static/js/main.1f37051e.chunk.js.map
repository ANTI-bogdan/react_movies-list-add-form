{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api/functions/validator.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","pattern","validateField","value","nameField","match","TextField","name","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","initialForm","NewMovie","onAdd","count","setCount","form","setForm","isHaveText","trim","handleChange","field","prevForm","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","newMovie","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f37051e.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","/* eslint-disable */\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n/* eslint-enable */\n\nexport const validateField = (value:string, nameField:string) => {\n  switch (nameField) {\n    case 'imgUrl':\n      return !value.match(pattern);\n      break;\n    case 'imdbUrl':\n      return !value.match(pattern);\n      break;\n    default:\n      return false;\n      break;\n  }\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { validateField } from '../../api/functions/validator';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string, typeField: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => { },\n\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value, name)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {validateField(value, name) && touched && (\n        <p className=\"help is-danger\">{`${label} is not correct`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { validateField } from '../../api/functions/validator';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst initialForm = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [form, setForm] = useState(initialForm);\n  const isHaveText = (!form.title.trim()\n  || validateField(form.imgUrl.trim(), 'imgUrl')\n  || validateField(form.imdbUrl.trim(), 'imdbUrl')\n  || !form.imdbId.trim());\n\n  const handleChange = (value: string, field: string) => {\n    setForm(prevForm => ({\n      ...prevForm,\n      [field]: value,\n    }));\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (isHaveText) {\n      return;\n    }\n\n    onAdd(form);\n    setForm(initialForm);\n    setCount(count + 1);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={form.title}\n        onChange={handleChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={form.description}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={form.imgUrl}\n        onChange={handleChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={form.imdbUrl}\n        onChange={handleChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={form.imdbId}\n        onChange={handleChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isHaveText && true}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}